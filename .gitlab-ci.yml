stages:
    - build
    - test
    - docs
    - report
    - release

variables:
    CONDA_ENV: "freva-dev"
    PYTHON_VERSION: "3.10"
    NUMEXPR_MAX_THREADS: "8"
    FREVA_ENV: "/tmp/freva/bin"
    EVALUATION_SYSTEM_CONFIG_FILE: ".docker/evaluation_system.conf"
    GIT_SUBMODULE_STRATEGY: recursive


build-test-image:
    stage: build
    needs: []
    image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    script:
        - if [ -n "$CI_COMMIT_BRANCH" ]; then IMAGETAG="$CI_COMMIT_BRANCH"; else IMAGETAG="$CI_COMMIT_SHA"; fi
        - echo $CI_COMMIT_BRANCH
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
        - /kaniko/executor --context $CI_PROJECT_DIR
                       --cleanup
                       --skip-unused-stages=true
                       --ignore-var-run
                       --dockerfile $CI_PROJECT_DIR/.docker/Dockerfile
                       --build-arg=binder=false
                       --destination $CI_REGISTRY_IMAGE/freva-dev:$CI_COMMIT_BRANCH
    tags:
        - docker, specific
    rules:
        - if: "$CI_COMMIT_BRANCH == 'main'"

build-stable-image:
    stage: build
    needs: []
    image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    script:
        - if [ -n "$CI_COMMIT_BRANCH" ]; then IMAGETAG="$CI_COMMIT_BRANCH"; else IMAGETAG="$CI_COMMIT_SHA"; fi
        - echo $CI_COMMIT_BRANCH
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
        - /kaniko/executor --context $CI_PROJECT_DIR
                       --cleanup
                       --skip-unused-stages=true
                       --ignore-var-run
                       --dockerfile $CI_PROJECT_DIR/.docker/Dockerfile
                       --destination $CI_REGISTRY_IMAGE/freva:latest
    tags:
        - docker, specific
    rules:
        - if: "$CI_COMMIT_BRANCH == 'main'"

lint:
    image: python
    stage: build
    tags:
        - docker, specific
    before_script:
        - pip install -e .[test]
    script:
        - make lint

.test_template: &py_test  # pytest framework template
    stage: test
    needs: ["lint"]
    image: registry.gitlab.dkrz.de/freva/evaluation_system/freva-dev:latest
    variables:
        CONDA: "Miniconda3-latest"
    tags:
        - docker, specific
    before_script:   # Do the unit tests
        - python deploy.py /tmp/freva -e -s --packages gitpython pandoc mysqlclient
    script:
        - make test

test:37:
    <<: *py_test
    variables:
        PYTHON_VERSION: "3.7"
test:38:
    <<: *py_test
    variables:
        PYTHON_VERSION: "3.8"

test:39:
    <<: *py_test
    variables:
        PYTHON_VERSION: "3.9"

test:latest:
    <<: *py_test
    script:  # Do the unit tests with converage reports
        - make test_coverage
    coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
    artifacts:
        when: always
        reports:
            junit: report.xml
        paths:
            - coverage_report
            - test_results
            - report.xml

docs:
    stage: docs
    needs: ["lint"]
    image: registry.gitlab.dkrz.de/freva/evaluation_system/freva-dev:latest
    tags:
        - docker, specific
    variables:
        CONDA: "Miniconda3-latest"
        EVALUATION_SYSTEM_PLUGINS: "/tmp/animator,animator"
    before_script:
        - python deploy.py /tmp/freva -e -s --packages gitpython pandoc cartopy xarray dask cftime netcdf4
        - 'git config --global --add safe.directory $PWD'
    script:
        - make prepdocs
        - make docs
    after_script:
        - mv docs/build/html sphinx_docs
    artifacts:
        when: always
        paths:
            - sphinx_docs
    rules:
        - if: "$CI_COMMIT_BRANCH == 'freva-dev'"

pages:
    stage: report
    needs: ["test:latest", "docs"]
    image: registry.gitlab.dkrz.de/freva/evaluation_system/freva-dev:latest
    tags:
        - docker, specific
    dependencies:
        - test:latest
        - docs
    before_script:
        - mkdir -p public; cp .docker/index.html public/
        - mkdir -p sphinx_docs
        - mv coverage_report public/
        - mv sphinx_docs public/
    script:
        - /opt/allure/bin/allure generate --clean test_results
    after_script:
        - mv allure-report public/
    artifacts:
        when: always
        paths:
            - public/
        reports:
            junit: report.xml
    rules:
        - if: "$CI_COMMIT_BRANCH == 'freva-dev'"
release_job:
    stage: release
    image: python
    needs: ["test:latest", "docs"]
    tags:
        - docker, specific
    rules:
        - if: $CI_COMMIT_TAG
    before_script:
        - curl --location --output /usr/local/bin/release-cli
          "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-linux-amd64"
        - pip install twine
        - chmod +x /usr/local/bin/release-cli
    script:
        - python setup.py sdist
        - TWINE_PASSWORD=${PIPY_TOKEN}
          TWINE_USERNAME=__token__
          python -m twine upload --verbose dist/*
    release:
        tag_name: '$CI_COMMIT_TAG'
        description: '$CI_COMMIT_TAG'
